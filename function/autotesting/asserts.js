import { strict as assert } from 'assert';
/*
Каждую проверку, которую мы написали для функции capitalize(), в тестировании принято называть утверждением (assert). Утверждения — ключевая часть тестов. Именно они проверяют функциональность кода:

import capitalize from '../src/capitalize.js';

 Первое утверждение (проверка на пустую строку)
if (capitalize('') !== '') {
  throw new Error('Функция работает неверно!');
}

 Второе утверждение (проверка на слово)
if (capitalize('hello') !== 'Hello') {
  throw new Error('Функция работает неверно!');
}
*/

/*
Можно заметить, что все проверки строятся одинаковым способом: условие => исключение. Node.js поставляется с модулем assert, в котором есть несколько функций, упрощающих написание утверждений:

 Такой необычный импорт связан с тем,
 что assert, экспортируемый по умолчанию, считается устаревшим
 Правильно использовать strict

import { strict as assert } from 'assert';
import capitalize from '../src/capitalize.js';

 Проверка сменилась с отрицательной на положительную
assert(capitalize('') === '');
assert(capitalize('hello') === 'Hello');
*/
assert( 2 === 2);
assert.equal(Math.pow(2, 2), 4);
console.assert(2 == 2);

// В этом выводе есть не только информация об ошибке, но и данные, которые передавались в утверждение. Такой формат упрощает анализ проблемы и ускоряет отладку.

// Однако, будьте осторожны. Функция strictEqual(actual, expected) проверяет равенство по ссылке. То есть два разных объекта, имеющих одинаковое содержание, рассматриваются как не эквивалентные:

// Для сравнения по значению используется ещё одно утверждение: assert.deepEqual(actual, expected). Оно опирается только на содержимое:

// assert.deepEqual({}, {}); // всё ок
// assert.deepEqual({ key: 'value' }, { key: 'value' }); // всё ок
// assert.deepEqual({ key: 'value' }, { key: 'another value' }); // Бум!

// Для тестирования негативных сценариев предназначены функции assert.notStrictEqual(actual, expected) и assert.notDeepStrictEqual(actual, expected). Они тестируют то, что значения не равны. Эти утверждения используются крайне редко, но знать о них всё равно полезно:

// assert.notDeepEqual({ a: 1 }, { a: '1' }); // OK!

//========================================================================= //

// Напишите тесты для функции take(items, n), которая возвращает первые n элементов из массива. По умолчанию n равен 1. Если n отрицательное число, то возвращается пустой массив.

assert.deepEqual(take([1, 2, 3], 2), [1, 2]);
assert.deepEqual(take([], 2), []);
assert.deepEqual(take([1, 2, 3], -1), []);
assert.deepEqual(take([1, 2, 3]), [1]);

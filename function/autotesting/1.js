// Дословно: выбросить новую ошибку
// Исключения бросают
// throw new Error('описание исключения');
// Код, следующий за этим выражением, не выполнится, а сам скрипт завершится с ошибкой
// console.log('nothing');

// Пример теста:

// if (capitalize('hello') !== 'Hello') { // Если результат функции не равен ожидаемому значению
//   Выбрасываем исключение и завершаем выполнение теста
//   throw new Error('Функция работает неверно!');
// }

// Структура этой директории зависит от того, на базе чего пишутся тесты, например, на базе какого фреймворка. В простых случаях, она отражает структуру исходного кода. Если предположить, что наша функция capitalize(text) определена в файле src/capitalize.js, то её тест лучше поместить в файл tests/capitalize.test.js. Слово test в имени модуля с тестами, используется только для более явного обозначения цели файла.

// Теперь при любых изменениях, затрагивающих эту функцию, важно не забывать запускать тесты:

// node tests/capitalize.test.js
// # Если все хорошо, код молча выполнится.
// # Если есть ошибка, то будет выведено сообщение об ошибке.


// При написании тестов нужно ориентироваться на разнообразие входных данных. У любой функции есть один или несколько основных сценариев использования. Например, в случае capitalize() — это любое слово. Достаточно написать ровно одну проверку, которая покрывает этот сценарий. Дальше нужно смотреть на "пограничные случаи". Это ситуации, в которых код может повести себя по-особенному:

// Работа с пустой строкой
// Обработка null
// Деление на ноль (в большинстве языков вызывает ошибку)
// Специфические ситуации для конкретных алгоритмов

// Содержимое теста:

// if (capitalize('hello') !== 'Hello') {
//   throw new Error('Функция работает неверно!');
// }

// if (capitalize('') !== '') {
//   throw new Error('Функция работает неверно!');
// }

// console.log('Все тесты пройдены!');
// Запуск:

// node tests/capitalize.test.js

// =======================================================================================//

// Напишите тесты для функции get(obj, key, defaultValue). Эта функция извлекает значение из объекта при условии, что ключ существует. В ином случае возвращается defaultValue.

// Тесты должны быть построены по такому же принципу, как это описывалось в теории урока: проверка через if и исключение в случае провала теста.

// Для хорошего тестирования этой функции понадобится как минимум три теста:

// Проверка, что функция возвращает нужное значение по существующему ключу (прямой тест на работоспособность)
// Проверка на то, что возвращается значение по умолчанию, если ключа нет
// Проверка на то, что возвращается значение по существующему ключу, даже если передано значение по умолчанию (пограничный случай)

const get = getFunction();

if (get({ hello: 'world' }, 'hello') !== 'world') {
  throw new Error('Функция работает неверно!');
}

if (get({}, 'hello', 'kitty') !== 'kitty') {
  throw new Error('Функция работает неверно!');
}

if (get({name: 'ivan'}, 'name', 'serg') !== 'ivan') {
  throw new Error('Функция работает неверно!');
}

console.log('Функция работает правильно');